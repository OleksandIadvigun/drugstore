### Create income ivoice
POST http://localhost:{{accountancyPort}}/api/v1/accountancy/invoice/income
Content-Type: application/json; charset=UTF-8

{
  "productItems": [
    {
      "name": "aspirin",
      "price": 20.0,
      "quantity": 10
    },
    {
      "name": "paracetamol",
      "price": 40.0,
      "quantity": 27
    },
    {
      "name": "decatylen",
      "price": 15.0,
      "quantity": 15
    }
  ]
}

> {%
client.test("should create income", function() {
     client.global.set("order_number_income",response.body.orderNumber);
     client.assert(response.status === 201, "Response status is not 201");
     client.assert(response.body.amount === 1505, "Wrong amount");
});
%}

###
PUT http://localhost:{{storePort}}/api/v1/store/receive
Content-Type: application/json; charset=UTF-8

{{order_number_income}}

> {%
client.test("should receive products", function() {
     client.assert(response.status === 202, "Response status is not 202");
     client.assert(response.body.status === "RECEIVED", "Transfer status is not RECEIVED");
});
%}

###
GET http://localhost:{{productPort}}/api/v1/products/search?search=aspirin&sortField=price

> {%
client.test("should search product aspirin", function() {
     client.assert(response.status === 200, "Response status is not 200");
     client.assert(response.body[0].name === "aspirin", "Name is not aspirin");
});
%}

###
GET http://localhost:{{productPort}}/api/v1/products/search?search=paracetamol&sortField=price

> {%
client.test("should search product paracetamol", function() {
     client.assert(response.status === 200, "Response status is not 200");
     client.assert(response.body[0].name === "paracetamol", "Name is not paracetamol");
});
%}

###
POST http://localhost:{{orderPort}}/api/v1/orders
Content-Type: application/json; charset=UTF-8

{
  "orderItems": [
    {
      "productId": 1,
      "quantity": 5
    }
  ]
}


> {%
client.test("should create order", function() {
     client.global.set("order_number_outcome",response.body.id);
     client.assert(response.status === 201, "Response status is not 201");
     client.assert(response.body.id != null, "Order id is null");
     client.assert(response.body.orderStatus === "CREATED", "Order status is not created");
     client.assert(response.body.orderItems[0].quantity === 5, "Order item quantity is not 5");
});
%}

###
PUT http://localhost:{{orderPort}}/api/v1/orders/{{order_number_outcome}}
Content-Type: application/json; charset=UTF-8

{
  "orderItems": [
    {
      "productId": 1,
      "quantity": 5
    },
    {
      "productId": 2,
      "quantity": 3
    }
  ]
}

> {%
client.test("should update order", function() {
    client.log(response.body.orderItems[0].quantity)
     client.assert(response.status === 202, "Response status is not 202");
     client.assert(response.body.id != null, "Order id is null");
     client.assert(response.body.orderStatus === "UPDATED", "Order status is not updated");
     client.assert(response.body.orderItems[0].quantity === 3, "Order item quantity is not 3");
     client.assert(response.body.orderItems[1].quantity === 5, "Order item quantity is not 5");
});
%}

###
GET http://localhost:{{orderPort}}/api/v1/orders/{{order_number_outcome}}/details
Content-Type: application/json; charset=UTF-8

> {%
client.test("should get order details", function() {
     client.assert(response.status === 200, "Response status is not 200");
     client.assert(response.body.orderItemDetails[0].name === "aspirin", "Order item name is not aspirin");
     client.assert(response.body.orderItemDetails[0].price === 40.00, "Order item price is not 40.00");
     client.assert(response.body.orderItemDetails[1].name === "paracetamol", "Order item name is not paracetamol");
     client.assert(response.body.orderItemDetails[1].price === 80.00, "Order item price is not 80.00");
     client.assert(response.body.total === 440, "Total is not 440");
});
%}

###
POST http://localhost:{{orderPort}}/api/v1/orders/confirm
Content-Type: application/json; charset=UTF-8

{{order_number_outcome}}

> {%
client.test("should confirm order", function() {
     client.assert(response.status === 201, "Response status is not 201");
     client.assert(response.body.orderNumber === 1, "Order number is not 1");
     client.assert(response.body.amount === 440, "Amount is not 440");
});
%}

###
PUT http://localhost:{{accountancyPort}}/api/v1/accountancy/invoice/pay/{{order_number_outcome}}
Content-Type: application/json; charset=UTF-8

440

> {%
client.test("should pay order", function() {
     client.assert(response.status === 202, "Response status is not 202");
     client.assert(response.body.orderNumber === 1, "Order number is not 1");
     client.assert(response.body.amount === 440, "Amount is not 440");
});
%}

####
#PUT http://localhost:{{accountancyPort}}/api/v1/accountancy/invoice/refund/3
#Content-Type: application/json; charset=UTF-8

###
PUT http://localhost:{{storePort}}/api/v1/store/deliver
Content-Type: application/json; charset=UTF-8

{{order_number_outcome}}

> {%
client.test("should deliver products", function() {
     client.assert(response.status === 202, "Response status is not 202");
     client.assert(response.body.orderNumber === 1, "Order number is not 1");
     client.assert(response.body.status === "DELIVERED", "Status is not delivered");
});
%}
###

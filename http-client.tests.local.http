### Positive scenario
###

### Create income ivoice
POST http://localhost:{{accountancyPort}}/api/v1/accountancy/invoice/income
Content-Type: application/json; charset=UTF-8

{
  "productItems": [
    {
      "name": "aspirin",
      "price": 20.0,
      "quantity": 10
    },
    {
      "name": "paracetamol",
      "price": 40.0,
      "quantity": 27
    },
    {
      "name": "decatylen",
      "price": 15.0,
      "quantity": 15
    }
  ]
}

> {%
client.test("should create income", function() {
     client.global.set("order_number_income",response.body.orderNumber);
     client.assert(response.status === 201, "Response status is not 201");
     client.assert(response.body.amount === 1505, "Wrong amount");
});
%}

### Receive product by income invoice
PUT http://localhost:{{storePort}}/api/v1/store/receive/{{order_number_income}}
Content-Type: application/json; charset=UTF-8

> {%
client.test("should receive products", function() {
     client.assert(response.status === 202, "Response status is not 202");
     client.assert(response.body.status === "RECEIVED", "Transfer status is not RECEIVED");
});
%}

### Search aspirin
GET http://localhost:{{productPort}}/api/v1/products/search?search=aspirin&sortField=price

> {%
client.test("should search product aspirin", function() {
     client.global.set("aspirin_product_number",response.body[0].productNumber);
     client.log(client.global.get("aspirin_product_number"))
     client.assert(response.status === 200, "Response status is not 200");
     client.assert(response.body[0].name === "aspirin", "Name is not aspirin");
});
%}

### Search paracetamol
GET http://localhost:{{productPort}}/api/v1/products/search?search=paracetamol&sortField=price

> {%
client.test("should search product paracetamol", function() {
     client.global.set("paracetamol_product_number",response.body[0].productNumber);
     client.assert(response.status === 200, "Response status is not 200");
     client.assert(response.body[0].name === "paracetamol", "Name is not paracetamol");
});
%}

### Create order
POST http://localhost:{{orderPort}}/api/v1/orders
Content-Type: application/json; charset=UTF-8

{
  "orderItems": [
    {
      "productNumber": "{{aspirin_product_number}}",
      "quantity": 5
    }
  ]
}


> {%
client.test("should create order", function() {
   client.log(response.body)
     client.global.set("order_number_outcome",response.body);
     client.assert(response.status === 201, "Response status is not 201");
     client.assert(response.body !== "undefined", "Order number is not undefined");
});
%}

### Update Order
PUT http://localhost:{{orderPort}}/api/v1/orders/{{order_number_outcome}}
Content-Type: application/json; charset=UTF-8

{
  "orderItems": [
    {
      "productNumber": "{{aspirin_product_number}}",
      "quantity": 3
    },
    {
      "productNumber":  "{{paracetamol_product_number}}",
      "quantity":4
    }
  ]
}

> {%
client.test("should update order", function() {
     client.assert(response.status === 202, "Response status is not 202");
     client.assert(response.body === "Updated", "Order is not updated");
});
%}

### Get Order Details
GET http://localhost:{{orderPort}}/api/v1/orders/{{order_number_outcome}}/details
Content-Type: application/json; charset=UTF-8

> {%
client.test("should get order details", function() {
     client.assert(response.status === 200, "Response status is not 200");
     client.assert(response.body.orderItemDetails[1].name === "aspirin", "Order item name is not aspirin");
     client.assert(response.body.orderItemDetails[1].price === 40.00, "Order item price is not 40.00");
     client.assert(response.body.orderItemDetails[0].name === "paracetamol", "Order item name is not paracetamol");
     client.assert(response.body.orderItemDetails[0].price === 80.00, "Order item price is not 80.00");
     client.assert(response.body.total === 440, "Total is not 440");
});
%}

### Confirm Order
POST http://localhost:{{orderPort}}/api/v1/orders/confirm/{{order_number_outcome}}
Content-Type: application/json; charset=UTF-8


> {%
client.test("should confirm order", function() {
     client.assert(response.status === 201, "Response status is not 201");
     client.assert(response.body === "Confirmed", "Order is not confirmed");
});
%}

### Pay order
PUT http://localhost:{{accountancyPort}}/api/v1/accountancy/invoice/pay/{{order_number_outcome}}
Content-Type: application/json; charset=UTF-8

440

> {%
client.test("should pay order", function() {
     client.assert(response.status === 202, "Response status is not 202");
     client.assert(response.body.orderNumber === client.global.get("order_number_outcome"), "Order number is not 1");
     client.assert(response.body.amount === 440, "Amount is not 440");
});
%}

### Deliver Products by Order
PUT http://localhost:{{storePort}}/api/v1/store/deliver/{{order_number_outcome}}
Content-Type: application/json; charset=UTF-8


> {%
client.test("should deliver products", function() {
     client.assert(response.status === 202, "Response status is not 202");
     client.assert(response.body.orderNumber === client.global.get("order_number_outcome"), "Order number is not 1");
     client.assert(response.body.status === "DELIVERED", "Status is not delivered");
});
%}

### Scenario with refund
###

### Search decatylen
GET http://localhost:{{productPort}}/api/v1/products/search?search=decatylen&sortField=price

> {%
client.test("should search product decatylen", function() {
    client.global.set("decatylen_product_number",response.body[0].productNumber);
     client.assert(response.status === 200, "Response status is not 200");
     client.assert(response.body[0].name === "decatylen", "Name is not decatylen");
});
%}

### Create order
POST http://localhost:{{orderPort}}/api/v1/orders
Content-Type: application/json; charset=UTF-8

{
  "orderItems": [
    {
      "productNumber": "{{decatylen_product_number}}",
      "quantity": 4
    }
  ]
}


> {%
client.test("should create order", function() {
     client.global.set("order_number_outcome2",response.body);
     client.assert(response.status === 201, "Response status is not 201");
     client.assert(response.body !== "undefined", "Order number is not undefined");
});
%}

### Get Order Details
GET http://localhost:{{orderPort}}/api/v1/orders/{{order_number_outcome2}}/details
Content-Type: application/json; charset=UTF-8

> {%
client.test("should get order details", function() {
     client.assert(response.status === 200, "Response status is not 200");
     client.assert(response.body.orderItemDetails[0].name === "decatylen", "Order item name is not decatylen");
     client.assert(response.body.orderItemDetails[0].price === 30.00, "Order item price is not 40.00");
     client.assert(response.body.total === 120, "Total is not 120");
});
%}

### Confirm Order
POST http://localhost:{{orderPort}}/api/v1/orders/confirm/{{order_number_outcome2}}
Content-Type: application/json; charset=UTF-8

> {%
client.test("should confirm order", function() {
     client.assert(response.status === 201, "Response status is not 201");
     client.assert(response.body === "Confirmed", "Order is not confirmed");

});
%}

### Pay order
PUT http://localhost:{{accountancyPort}}/api/v1/accountancy/invoice/pay/{{order_number_outcome2}}
Content-Type: application/json; charset=UTF-8

120

> {%
client.test("should pay order", function() {
     client.assert(response.status === 202, "Response status is not 202");
     client.assert(response.body.orderNumber === client.global.get("order_number_outcome2"), "Order number is not 1");
     client.assert(response.body.amount === 120, "Amount is not 120");
});
%}

### Refund order
PUT http://localhost:{{accountancyPort}}/api/v1/accountancy/invoice/refund/{{order_number_outcome2}}
Content-Type: application/json; charset=UTF-8

> {%
client.test("should refund order", function() {
     client.assert(response.status === 202, "Response status is not 202");
     client.assert(response.body.orderNumber === client.global.get("order_number_outcome2"), "Order number is not 1");
     client.assert(response.body.amount === 120, "Amount is not 120");
});
%}
